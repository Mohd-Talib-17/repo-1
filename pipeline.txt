pipeline {
    agent any
    tools {
        jdk 'jdk17'
        nodejs 'node16'
    }
    environment {
        SCANNER_HOME = tool 'sonar-scanner'
        // Replace these placeholders with your actual GKE cluster and project details
        GKE_CLUSTER_NAME = 'your-cluster-name'
        GKE_CLUSTER_ZONE = 'your-cluster-zone'
        GCP_PROJECT_ID = 'your-project-id'
        CREDENTIAL_ID = 'your k8s cred'
    }
    stages {
        stage('clean workspace') {
            steps {
                cleanWs()
            }
        }
        stage('Checkout from Git') {
            steps {
                git branch: 'main', url: 'https://github.com/Mohd-Talib-17/repo-1.git'
            }
        }
        stage("Sonarqube Analysis ") {
            steps {
                withSonarQubeEnv('sonar-scanner') {
                    sh ''' $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=Netflix \
                    -Dsonar.projectKey=Netflix '''
                }
            }
        }
        stage("quality gate") {
            steps {
                script {
                    waitForQualityGate abortPipeline: false, credentialsId: 'sonar-qube-token' 
                }
            } 
        }
        stage('Install Dependencies') {
            steps {
                sh "npm install"
            }
        }
        stage('OWASP FS SCAN') {
            steps {
                dependencyCheck additionalArguments: '--scan ./ --disableYarnAudit --disableNodeAudit', odcInstallation: 'DP-Check'
                dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
            }
        }
        stage('TRIVY FS SCAN') {
            steps {
                sh "trivy fs . > trivyfs.txt"
            }
        }
        stage("Docker build & Push") {
            steps {
                script {
                    withdockerRegistry(credentialsId: 'Docker', toolname: 'Docker') {
                        sh "docker build --build-arg TMDB_V3_API_KEY=adb1817c3691de96999e4cec9125b66b -t netflix ."
                        sh "docker tag netflix mohammadtalib17/netflix:latest"
                        sh "docker push mohammadtalib17/netflix:latest"
                    }
                }
            }
        }
        stage('Deploy to container') {
            steps {
                sh 'docker run -d -p 8081:80 mohammadtalib17/netflix:latest'
            }
        }
        stage('Deploy to GKE') {
            steps {
                script {
                    // Authenticate with GKE using Kubernetes credentials
                    withCredentials([string(credentialsId: 'GKE_CREDENTIAL_ID', variable: 'GKE_CREDENTIAL')]) {
                        sh """
                        gcloud auth activate-service-account --key-file=${GKE_CREDENTIAL}
                        gcloud container clusters get-credentials ${GKE_CLUSTER_NAME} --zone=${GKE_CLUSTER_ZONE} --project=${GCP_PROJECT_ID}
                        """
                    }
                    // Deploy the application to GKE
                    sh "kubectl apply -f your-deployment.yaml"  
                    sh "kubectl apply -f your-service.yaml"                 
            }
        }
    }
}

